function setup()
BEGINFUNCTION
	SET canvas size TO 1080x1920
	SET background TO backgroundColour
	CALL clearBoard()
    CALL setupStructures()
	CALL setupMenus()
    CALL setupGameSaves()
	SET currentMenu TO 1
ENDFUNCTION

function draw()
BEGINFUNCTION
	CALL checkKeys()
    CALL checkMousePressed()
	CALL render()
	CALL god()
ENDFUNCTION

function setupMenus()
BEGINFUNCTION
    FOR each in MenuFunctions
        SET menus[each] TO MenuFunctions[each]
    ENDFOR
ENDFUNCTION

function setupGameSaves()
BEGINFUNCTION
    open GAME_SAVES_FILENAME
    SET gameSaves TO lines
ENDFUNCTION

function resetToDefaults()
BEGINFUNCTION
    CALL changeMenu(1)
    SET paused TO true
    SET screenXPos TO START_GRID_X
    SET screenYPos TO START_GRID_Y
    SET cellSize TO ORIGINAL_CELL_SIZE
    SET screenGridHeight = ORIGINAL_SCREEN_GRID_HEIGHT
    SET screenGridWidth = ORIGINAL_SCREEN_GRID_WIDTH
    CALL clearBoard()
ENDFUNCTION

function openSaveMenu()
BEGINFUNCTION
    CALL changeMenu(3)
    CALL currentMenu.setInputText(currentFilename)
ENDFUNCTION

function cancelPlacement()
BEGINFUNCTION
    SET currentStructureActive TO -1
    SET renderStructure TO false
ENDFUNCTION

function changeMenu(menuIndex)
BEGINFUNCTION
    CALL menus[currentMenu].reset()
    currentMenu = menuIndex
ENDFUNCTION

function god(cellList)
BEGINFUNCTION
    IF not paused THEN
	FOR i IN RANGE 0 TO BOARD_WIDTH
	    FOR j IN RANGE 0 TO BOARD_HEIGHT
		SET BoardCopy[i][j] TO Board[i][j]
		SET Counter TO 0
		IF i NOT EQUAL TO 0 AND board[i-1][j] THEN
			SET counter To counter + 1
		IF i NOT EQUAL TO BOARD_WIDTH - 1 AND board[i+1][j] THEN
			SET counter To counter + 1
		IF i NOT EQUAL TO 0 AND j NOT EQUAL TO 0 AND board[i-1][j-1] THEN
			SET counter To counter + 1
		IF j NOT EQUAL TO 0 AND board[i][j-1] EQUAL TO 1 THEN
			SET counter To counter + 1
		IF i NOT EQUAL TO BOARD_WIDTH - 1 AND j NOT EQUAL TO 0 AND board[i+1][j-1] THEN
			SET counter To counter + 1
		IF i NOT EQUAL TO 0 AN j NOT EQUAL TO BOARD_HEIGHT - 1 AND board[i-1][j+1]  THEN
			SET counter To counter + 1
		IF j NOT EQUAL TO BOARD_HEIGHT - 1 AND board[i][j+1] THEN
			SET counter To counter + 1
		IF i NOT EQUAL TO BOARD_WIDTH -1 AND j NOT EQUAL TO BOARD_HEIGHT - 1 AND board[i+1][j+1] THEN
			SET counter To counter + 1
		IF counter LESS THAN 2 AND board[i][j] THEN
			SET boardcopy[i][j] TO false
		IF counter GREATER THAN 3 AND board[i][j] THEN
			SET boardcopy[i][j] TO false
		IF counter EQUAL TO 3 AND board[i][j] EQUAL TO false THEN
			SET boardcopy[i][j] TO true
	FOR i IN RANGE 0 TO BOARD_WIDTH
	    FOR j IN RANGE 0 TO BOARD_HEIGHT
	        SET board[i][j] TO boardcopy[i][j]
ENDFUNCTION

function checkMousePressed()
BEGINFUNCTION
    IF mousePressed THEN
        IF mousePressedDelay IS 0 THEN
            SET anythingClicked TO menus[currentMenu].checkMousePressed()
            IF NOT anythingClicked AND currentStructureActive IS NOT -1 THEN
                PLACE currentStructure
                IF shift IS pressed THEN
                    SET currentStructureActive TO -1
                ENDIF
            ENDIF
            SET mousePressedDelay TO 20
        ENDIF
    ELSE
        SET mousePressedDelay TO 0
    ENDIF
    IF mousePressedDelay IS NOT 0 THEN
        MINUS 1 from mousePressedDelay
    ENDIF
ENDFUNCTION

function mouseWheel(event)
BEGINFUNCTION
    IF currentStructureActive IS NOT -1 THEN
        ROTATE structure
    ELSE IF currentMenu IS 0
        IF event IS 1 THEN
            ZOOM in
        ELSE
            ZOOM out
        ENDIF
    ENDIF
ENDFUNCTION

function keyPressed()
BEGINFUNCTION
    IF key IS NEW_LINE_CHARACTER THEN
        Goto next menu
    ELSE IF textBox is focused THEN
        CALL currentTextBox.inputKey(key)
    ELSE IF key IS ESCAPE_KEY THEN
        EXIT currentMenu
    ENDIF
ENDFUNCTION

function checkKeys()
BEGINFUNCTION
	IF currentMenu IS 0 THEN
		IF upArrow IS pressed THEN
			MINUS screenSpeed from screenYPos
		ELSE IF downArrow IS pressed THEN
			ADD screenSpeed TO screenYPos
		ELSE IF leftArrow IS pressed THEN
			MINUS screenSpeed from screenXPos
		ELSE IF rightArrow IS pressed THEN
			ADD screenSpeed TO screenXPos
		ENDIF
	ENDIF
ENDFUNCTION

function readFromFile(filename)
BEGINFUNCTION
    open filename
    SET structureWidth TO widest line
    CREATE NEW boolean[][] CALLED struct
    FOR i in file.lines
        FOR j in lines.length
            SET struct[i][j] TO lines[j]
        ENDFOR
    ENDFOR
    RETURN struct
ENDFUNCTION

function saveToFile(filename, struct)
BEGINFUNCTION
    SAVE struct TO filename
ENDFUNCTION

function openSavedGame(filename)
BEGINFUNCTION
    IF filename exists THEN
        ADD filename TO gameSaves
        CALL changeMenu(0)
        CALL setBoardToStruct(filename)
    ELSE
        currentMenu.setString("Save does not exist!")
    ENDIF
ENDFUNCTION

function saveGame(filename)
BEGINFUNCTION
    CAST board TO String
	SET filename TO INPUT
	SAVE board TO filename
ENDFUNCTION

function clearBoard()
BEGINFUNCTION
	SET ALL values in board TO 0
ENDFUNCTION

function randomBoard()
BEGINFUNCTION
	SET ALL values in board TO random integer between 0 and 1
ENDFUNCTION

function setBoardToStruct(struct)
BEGINFUNCTION
    PLACE struct in the middle of board
ENDFUNCTION

function startGame_Explore()
BEGINFUNCTION
	CALL randomBoard()
	SET mode TO 1
	CALL changeMenu(0)
ENDFUNCTION

function startGame_file()
BEGINFUNCTION
    CALL clearBoard()
    SET mode TO 3
    CALL changeMenu(2)
ENDFUNCTION

function startGame_sandbox()
BEGINFUNCTION
	SET mode TO 2
	CALL changeMenu(0)
ENDFUNCTION

function render()
BEGINFUNCTION
	RENDER background as backgroundColour
	CALL renderBoard()
    CALL currentMenu.render()
ENDFUNCTION

function renderBoard()
BEGINFUNCTION
    SET notDrawnStructuresLines TO True
    SET gridX TO screenXPos / cellSize
    SET gridY TO screenYPos / cellSize
    FOR i IN RANGE gridX-1 TO gridX + SCREEN_GRID_WIDTH + 1
        FOR j IN RANGE gridY-1 TO gridY + SCREEN_GRID_HEIGHT + 1
            IF i OR j IS out of bounds THEN
                CONTINUE
            ELSE IF currentStructureActive IS NOT -1 and i AND j ARE IN the structure position THEN
                IF notDrawnStructuresLines THEN
                    DRAW lines
                ENDIF
                IF structure.get(i, j) THEN
                    DRAW blue square
                ELSE IF board[i][j] THEN
                    DRAW red square
                ENDIF
            ELSE IF board[i][j] THEN
                DRAW green square
            ENDIF
        ENDFOR
    ENDFOR
ENDFUNCTION

class GraphicalObject
BEGINCLASS
    function isMouseOver()
	BEGINFUNCTION
		IF mouse IS over this THEN
			return True
		ELSE
			return False
		ENDIF
	ENDFUNCTION

    function render()
    BEGINFUNCTION
    ENDFUNCTION

    function checkMousePressed()
    BEGINFUNCTION
        RETURN isMouseOver()
    ENDFUNCTION

    function getType()
    BEGINFUNCTION
        RETURN "Base"
    ENDFUNCTION
ENDCLASS


class Button INHERITS FROM GraphicalObject
BEGINCLASS
	function isMouseOver()
	BEGINFUNCTION
		IF mouse IS over this THEN
			return True
		ELSE
			return False
		ENDIF
	ENDFUNCTION

	function render()
	BEGINFUNCTION
		SET stroke TO this.outline
		IF isMouseOver() THEN
			SET fill TO this.hoverColour
		ELSE
			SET fill TO this.baseColour
		ENDIF
		DRAW rectangle
		SET textSize TO this.my_textSize
		DRAW text
	ENDFUNCTION

    function checkMousePressed(menu, hasSomethingBeenPressed)
    BEGINFUNCTION
        IF isMouseOver() AND NOT hasSomethingBeenPressed THEN
            IF currentStructureActive IS NOT -1 THEN
                SET currentStructureActive TO -1
            ENDIF
            CALL my_function(menu)
        ENDIF
    ENDFUNCTION

    function getType()
    BEGINFUNCTION
        RETURN "Button"
    ENDFUNCTION

    function reset()
    BEGINFUNCTION
        IF type IS "playPause" THEN
            SET my_text TO "PLAY"
        ENDIF
    ENDFUNCTION
ENDCLASS

class Structure
BEGINCLASS
    function update()
    BEGINFUNCTION
        set gridX TO the position of the mouseX relative TO the board
        set gridY TO the position of the mouseY relative TO the board
    ENDFUNCTION

    function place()
    BEGINFUNCTION
        PLACE structure on the board
    ENDFUNCTION

    function placeInLocation(x, y)
    BEGINFUNCTION
        PLACE structure on the board
    ENDFUNCTION

    function getWidth()
    BEGINFUNCTION
        RETURN my_width
    ENDFUNCTION

    function getHeight()
    BEGINFUNCTION
        RETURN my_height
    ENDFUNCTION

    function getX()
    BEGINFUNCTION
        RETURN gridX
    ENDFUNCTION

    function getY()
    BEGINFUNCTION
        RETURN gridY
    ENDFUNCTION

    function get(int x, int y)
    BEGINFUNCTION
        RETURN structure[x][y]
    ENDFUNCTION

    function resetRotated()
    BEGINFUNCTION
        SET rotatedStructure TO structure
        SET my_RHeight TO my_height
        SET my_RWidth TO my_width
    ENDFUNCTION

    function rotate(r)
    BEGINFUNCTION
        ROTATE rotatedStructure
        SET my_RWidth to my_RHeight
        SET my_RHeight to my_RWidth
    ENDFUNCTION
ENDCLASS


class TextBox INHERITS FROM GraphicalObject
BEGINCLASS
    function changeTextStartPos(changeBy)
    BEGINFUNCTION
        inputTextStartPos += changeBy
        updateVisibleText()
    ENDFUNCTION

    function updateVisibleText()
    BEGINFUNCTION
        SET visibleText TO substring of inputText beginning at inputTextStartPos
    ENDFUNCTION

    function update()
    BEGINFUNCTION
        SET showCursor TO NOT showCursor
    ENDFUNCTION

    function clear()
    BEGINFUNCTION
        CLEAR inputText
    ENDFUNCTION

    function inputKey(key)
    BEGINFUNCTION
        ADD key TO inputText
    ENDFUNCTION

    function render()
    BEGINFUNCTION
        CALL update()
        DRAW rectangle
        DRAW visibleText
        DRAW cursor AT cursorPosition
    ENDFUNCTION

    function setFocused(newFocused)
    BEGINFUNCTION
        isFocused = newFocused
    ENDFUNCTION

    function getInput()
    BEGINFUNCTION
        RETURN inputText
    ENDFUNCTION

    function getIsFocused()
    BEGINFUNCTION
        RETURN isFocused
    ENDFUNCTION

    function checkMousePressed()
    BEGINFUNCTION
        IF isMouseOver() THEN
            SET cursorPosition TO mouseX
            isFocused = true
        ELSE
            SET isFocused TO false
            SET inputTextStartPos TO 0
            SET cursorPosition TO 0
            CALL updateVisibleText()
    ENDFUNCTION

    function reset()
    BEGINFUNCTION
        CALL clear()
        CALL setFocused(false)
        SET inputTextStartPos TO 0
        SET cursorPosition TO 0
        CALL updateVisibleText()
    ENDFUNCTION

    function getType()
    BEGINFUNCTION
        RETURN "TextBox"
    ENDFUNCTION

    function sendCursorToEnd()
    BEGINFUNCTION
        SET cursorPosition TO length of inputText
        CALL updateVisibleText()
    ENDFUNCTION

    function setInputText(newString)
    BEGINFUNCTION
        SET inputText TO newText
        CALL sendCursorToEnd()
    ENDFUNCTION
ENDCLASS

class Menu INHERITS FROM GraphicalObject
BEGINCLASS
    function reset()
    BEGINFUNCTION
        RESET my_menus
        RESET my_buttons
        RESET my_textBox
        SET my_text TO startText
    ENDFUNCTION

    function isMouseOverElement()
    BEGINFUNCTION
        IF my_buttons.isMouseOver() THEN
            RETURN true
        ELSE IF my_menus.isMouseOverElement() THEN
            RETURN true
        ELSE IF my_structures.isMouseOver() THEN
            RETURN true
        ELSE IF my_textBox.isMouseOver() THEN
            RETURN true
        ELSE
            RETURN false
        ENDIF
    ENDFUNCTION

    function checkMousePressed()
    BEGINFUNCTION
        SET hasButtonBeenPressed TO my_buttons.checkMousePressed(this, hasButtonBeenPressed)
        CALL my_menus.checkMousePressed()
        CALL my_structures.checkMousePressed()
        CALL my_textBox.checkMousePressed()
        IF mouse IS outOfBounds THEN
            CALL changeMenu(exitMenu)
            CALL my_textBox.reset()
        ENDIF
    ENDFUNCTION

    function render()
    BEGINFUNCTION
        RENDER ALL objects
    ENDFUNCTION

    function getInput()
    BEGINFUNCTION
        IF hasTextBox THEN
            RETURN my_textBox.getInput()
        ELSE
            RETURN ""
        ENDIF
    ENDFUNCTION

    function setString(newString)
    BEGINFUNCTION
        SET my_text TO newString
    ENDFUNCTION

    function isTextBoxFocused()
    BEGINFUNCTION
        IF hasTextBox THEN
            RETURN my_textBox.getIsFocused()
        ELSE
            RETURN false
        ENDIF
    ENDFUNCTION

    function getTextBox()
    BEGINFUNCTION
        RETURN my_textBox
    ENDFUNCTION

    function getType()
    BEGINFUNCTION
        RETURN "Menu"
    ENDFUNCTION

    function setInputText(newString)
    BEGINFUNCTION
        IF hasTextBox THEN
            textBox.setInputText(newString)
        ENDIF
    ENDFUNCTION
ENDCLASS

class GraphicalStructure INHERITS FROM GraphicalObject
BEGINCLASS
    function render()
    BEGINFUNCTION
        DRAW square
        DRAW structure
        DRAW name
    ENDFUNCTION

    function checkMousePressed()
    BEGINFUNCTION
        IF isMouseOver THEN
            CALL changeMenu(0)
            SET currentStructureActive TO structureID
            SET renderStructure TO true
        ENDIF
    ENDFUNCTION
ENDCLASS

class GraphicImage INHERITS FROM GraphicalObject
BEGINCLASS
    function render()
    BEGINFUNCTION
        RENDER img
    ENDFUNCTION
ENDCLASS